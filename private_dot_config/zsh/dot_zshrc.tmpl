#!/bin/zsh
# This file is managed by chezmoi, its source is $HOME/.local/share/chezmoi/private_dot_config/zsh/dot_zshrc.tmpl.

# If not running interactively, don't do anything
if [[ ! -o interactive ]]; then
  return
fi

# Uncomment the following line and the first line to start profiling.
# zprof

declare -A ZINIT  # initial Zinit's hash definition, if configuring before loading Zinit.
ZINIT[HOME_DIR]=$HOME/.cache/zinit

### Added by Zinit's installer and tuned
if [[ ! -f $ZINIT[HOME_DIR]/bin/zinit.zsh ]]; then
  print -P "%F{33}â–“â–’â–‘ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})â€¦%f"
  command mkdir -p "$ZINIT[HOME_DIR]" && command chmod g-rwX "$ZINIT[HOME_DIR]"
  command git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT[HOME_DIR]/bin" && \
    print -P "%F{33}â–“â–’â–‘ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}â–“â–’â–‘ The clone has failed.%f%b"
fi

source "$ZINIT[HOME_DIR]/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

### End of Zinit's installer chunk

# Profile
if [ -f $HOME/.config/shell/profile ]; then
  zinit wait"0" lucid for is-snippet $HOME/.config/shell/profile
fi

# Prompt theme: Powerlevel10k, https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k.
# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
# Install if not present.
[[ -f ~/.config/zsh/.p10k.zsh ]] || zinit ice depth=1; zinit light romkatv/powerlevel10k
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh

# Alias configuration for forgit.
export FORGIT_NO_ALIASES=1

zinit wait"!0" lucid for \
  OMZL::directories.zsh \{{/* Aliases '-', '2', '...' and others. */}}
  OMZP::command-not-found \{{/* Proposes a package for a missing command. */}}
  OMZP::git \
  OMZP::pip \
  OMZP::safe-paste \{{/* Treat new lines from paste differently than typed ones. Cf. https://cirw.in/blog/bracketed-paste. */}}
  zdharma-continuum/zsh-navigation-tools \{{/* Approximate Ctrl-R matching â€“ pressing Ctrl-F during search will allow 1 or 2 errors in what is typed in. http://psprint.github.io/Zsh-Navigation-Tools-approximate-matching/. Requires installation of psprint/zsh-navigation-tools below.  */}}
  agkozak/zsh-z \{{/* Jump around with z. Cf. https://github.com/agkozak/zsh-z. */}}
  OMZP::common-aliases \{{/* A few useful aliases: gst, gp, gl, etc. */}}{{/*TODO: use atload"unalias gr" */}}
  zdharma-continuum/zsh-navigation-tools \{{/* Approximate matching â€“ pressing Ctrl-F during search will allow 1 or 2 errors in what is typed in. http://psprint.github.io/Zsh-Navigation-Tools-approximate-matching/. Requires installation above to set the binkey. */}}
  zsh-users/zsh-completions \
  wfxr/forgit
{{- if 0 }}
  OMZP::per-directory-history \{{/* Toggle per-directory history. */}} Does not share history between open shells
  OMZP::zsh-interactive-cd \{{/* Interactive cd command. */}} Requires ENTER even on single entry.
{{- end }}

zinit load zsh-users/zsh-autosuggestions{{/* Show the last matching history in grey. Right arrow to use. Seems not to work with Turbo. */}}
zinit load zsh-users/zsh-syntax-highlighting{{/* Must be loaded without Turbo because of fasd */}}

# Completion for GNU compatible executables.
# Deactivated until issue ".zshrc:57: command not found: compdef"
# compdef _gnu_generic csv2freecad

# Terminal title on directory change
# cf. http://www.tldp.org/HOWTO/text/Xterm-Title
# Deactivated because set by oh-my-zsh
case $TERM in
  xterm*)
    precmd() {print -Pn "\e]0;%20<..<%~\a"}
    ;;
esac

# History management
HISTFILE=$HOME/.cache/zsh_history
HISTSIZE=1000
SAVEHIST=2000
setopt hist_ignore_space

{{- /* Save history immediately, so that history is available in all shells. */}}
setopt inc_appendhistory
{{- /* Avoid duplicates in history. */}}
setopt hist_ignore_dups
setopt hist_save_no_dups
{{- /* Change directory without cd. */}}
setopt autocd

# Vim key bindings
bindkey -v

# Completion configuration.
# Case-insensitive completion.
# Highlight the common part and the next character of completions.
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==02=01}:${(s.:.)LS_COLORS}")'

# Add custom directory for completion.
# E.g.:
# $ chezmoi completion zsh > ~/.local/share/zsh/site-functions/_chezmoi
# $ rustup completions zsh rustup > ~/.local/share/zsh/site-functions/_rustup
fpath+=$HOME/.local/share/zsh/site-functions

if [ -e /usr/share/vcstool-completion/vcs.zsh ]; then
  zinit wait"0" lucid for is-snippet /usr/share/vcstool-completion/vcs.zsh
fi

# The following lines were added by compinstall
zstyle ':completion:*' completer _complete _ignored
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle :compinstall filename "$HOME/.config/zsh/.zshrc"

autoload -Uz compinit && compinit

# End of lines added by compinstall
autoload -Uz bashcompinit && bashcompinit
if [ -e $HOME/.local/share/bash-completion/completions/gis ]; then
  zinit wait"0" lucid for is-snippet $HOME/.local/share/bash-completion/completions/gis
fi

bindkey '^P' up-history
bindkey '^N' down-history
# Search with command starting with the same letters
autoload up-line-or-beginning-search # load hook
autoload down-line-or-beginning-search
zle -N up-line-or-beginning-search # activate hook
zle -N down-line-or-beginning-search
bindkey "${key[Up]}" up-line-or-beginning-search # add keybinding to hook
bindkey "${key[Down]}" down-line-or-beginning-search
bindkey '[1;5D' backward-word # Ctrl-Left
bindkey '[1;5C' forward-word # Ctrl-Right

# Alt + . inserts the last parameter from the last command
bindkey "." insert-last-word

# 'ctrl-x r' will complete the 12 last modified (mtime) files/directories
zle -C newest-files complete-word _generic
bindkey '^Xr' newest-files
zstyle ':completion:newest-files:*' completer _files
zstyle ':completion:newest-files:*' file-patterns '*~.*(omN[1,12])'
zstyle ':completion:newest-files:*' menu select yes
zstyle ':completion:newest-files:*' sort false
zstyle ':completion:newest-files:*' matcher-list 'b:=*' # important

# 'ctrl-x *' will expand the current word.
bindkey '^X*' expand-word

# toggle autosuggestion because it doesn't work well with non 256-color terminals.
bindkey '^ ' autosuggest-toggle

# Case-insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Key bindings for fasd completion
bindkey '^X^F' fasd-complete-f  # C-x C-f to do fasd-complete-f (only files)
bindkey '^X^D' fasd-complete-d  # C-x C-d to do fasd-complete-d (only dirs)

# Show vim mode (http://dougblack.io/words/zsh-vi-mode.html)
# TODO: solve incompatiblity with Ctrl-Up binding
#function zle-line-init zle-keymap-select {
#	VIM_PROMPT="%{$fg_bold[yellow]%} [% NORMAL]%  %{$reset_color%}"
#	RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $EPS1"
#	zle reset-prompt
#}
#
#zle -N zle-line-init
#zle -N zle-keymap-select
#export KEYTIMEOUT=1

# Do not expand glob patterns, propose a list of matches instead.
setopt globcomplete
setopt interactivecomments # pound sign in interactive prompt as a comment

# Use extendedglob (for example ^CMakeLists.txt for all but this file)
setopt extendedglob

# Completion for gr (Generated with `gr completion > ...`).
if [ -e $HOME/.local/share/zsh/site-functions/gr.zsh ]; then
  zinit wait"1" lucid for is-snippet $HOME/.local/share/zsh/site-functions/gr.zsh
fi

# Completion for kitty
which kitty &>/dev/null && kitty + complete setup zsh | source /dev/stdin
# Completion for kg, kitty hyperlinked grep based on ripgrep (~/.local/bin/kg)
zinit ice wait'2' lucid atinit'kg_completion() { compdef _rg kg ; }; kg_completion' nocd for /dev/null

# Completion for pip3 (Generated with `pip3 completion --zsh > ...`).
if [ -e $HOME/.local/share/zsh/site-functions/pip3.zsh ]; then
  zinit wait"1" lucid for is-snippet $HOME/.local/share/zsh/site-functions/pip3.zsh
fi

# Configuration for z.
ZSHZ_DATA=$HOME/.cache/z
ZSHZ_ECHO=1{{/* displays the new path name when changing directories (default: 0). */}}
ZSHZ_NO_RESOLVE_SYMLINKS=1{{/* prevents symlink resolution (default: 0). */}}

# ROS setup
ros1_activate()
{
  if [ ! ${ROS_WORKSPACE} ]; then
    # Read the workspace from /tmp/ros1_workspace, if $ROS_WORKSPACE is not
    # defined.
    if [ -e /tmp/ros1_workspace.conf ]; then
      export ROS_WORKSPACE=$(cat /tmp/ros1_workspace.conf)
    else
      echo "\$ROS_WORKSPACE is not defined and /tmp/ros1_workspace.conf does not exist" >&2
      return 1
    fi
  fi

  if [ ! ${ROS_WORKSPACE} ]; then
    return 0
  fi

  source $ROS_WORKSPACE/devel/setup.zsh || return 1
}

# Activate ROS1 if /tmp/ros1_workspace.conf exists.
if [ -e /tmp/ros1_workspace.conf ]; then
  echo "Activating ROS1 workspace $(cat /tmp/ros1_workspace.conf)" >&2
  ros1_activate || echo "Failed to activate ROS1 workspace $(cat /tmp/ros1_workspace.conf)"
fi

# Prints the ROS distro for a given workspace, relies on the existence of the
# file $ROS_WORKSPACE/install/ROS_DISTRO with the distro name as content
# (without whitespaces).
rosdistro_from_workspace()
{
  WORKSPACE=${1:-$ROS_WORKSPACE}
  ROS_DISTRO=$(cat $ROS_WORKSPACE/install/ROS_DISTRO)
  echo $ROS_DISTRO
}

# ROS2 setup, sources /opt/ros/$ROS_DISTRO/setup.zsh, then $WORKSPACE/install/setup.zsh.
ros2_activate()
{
  if [ ! ${ROS_WORKSPACE} ]; then
    # Read the workspace from /tmp/ros2_workspace, if $ROS_WORKSPACE is not
    # defined.
    if [ -e /tmp/ros2_workspace.conf ]; then
      export ROS_WORKSPACE=$(cat /tmp/ros2_workspace.conf)
    else
      echo "\$ROS_WORKSPACE is not defined and /tmp/ros2_workspace.conf does not exist" >&2
      return 1
    fi
  fi

  if [ ! ${ROS_WORKSPACE} ]; then
    return 0
  fi

  export ROS_DISTRO=$(rosdistro_from_workspace)

  {{- /*
  # Limit the communication to local host.
  export ROS_LOCALHOST_ONLY=1
  */}}

  # Set a domain id.
  _default_domain_id="$(( $(( 0x$(whoami | md5sum | cut -f 1 -d " " | cut -c 1-4) )) % 101 ))"
  export ROS_DOMAIN_ID="${ROS_DOMAIN_ID:=$_default_domain_id}"
  unset _default_domain_id

  source /usr/share/colcon_cd/function/colcon_cd.sh || echo "/usr/share/colcon_cd/function/colcon_cd.sh does not exist" >&2

  source /opt/ros/$ROS_DISTRO/setup.zsh || return 1
  source $ROS_WORKSPACE/install/setup.zsh || return 1

  {{/* source ${ROS_WORKSPACE}/install/share/ament_tools/environment/ament-completion.zsh || echo "${ROS_WORKSPACE}/install/share/ament_tools/environment/ament-completion.zsh does not exist" >&2 */ -}}

  {{/* Both sourcing must be after source setup.zsh, so that $ROS_DISTRO is defined. */ -}}
  {{/* Sourcing `ament_index-argcomplete.zsh` must be before sourcing `ros2-argcomplete.zsh`. */ -}}
  {{/* It seems that argcomplete files are mutually exclusive, thus `ros2-argcomplete.zsh` as last. */ -}}
  source /opt/ros/${ROS_DISTRO}/share/ament_index_python/environment/ament_index-argcomplete.zsh || echo "/opt/ros/${ROS_DISTRO}/share/ament_index_python/environment/ament_index-argcomplete.zsh does not exist" >&2
  source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh || echo "/usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh does not exist" >&2
  source /opt/ros/${ROS_DISTRO}/share/ros2cli/environment/ros2-argcomplete.zsh || echo "/opt/ros/${ROS_DISTRO}/share/ros2cli/environment/ros2-argcomplete.zsh does not exist" >&2
  eval "$(register-python-argcomplete3 ros2)"
  eval "$(register-python-argcomplete3 colcon)"


  # Initialize colcon_cd.
  if [ -e ${ROS_WORKSPACE} ]; then
    _cwd=$(pwd)
    cd $ROS_WORKSPACE
    colcon_cd --set > /dev/null
    cd $_cwd
    unset _cwd
  fi

  # Colorized terminal output.
  export RCUTILS_COLORIZED_OUTPUT=1

  export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:/opt/ros/$ROS_DISTRO/share/turtlebot3_gazebo/models

  # ROS2 has no roscd command, alias it.
  function roscd()
  {
    colcon_cd $@
  }

  alias rosed='colcon edit'
}

# Activate ROS2 if /tmp/ros2_workspace.conf exists.
if [ -e /tmp/ros2_workspace.conf ]; then
  echo "Activating ROS2 workspace $(cat /tmp/ros2_workspace.conf)" >&2
  ros2_activate || echo "Failed to activate ROS2 workspace $(cat /tmp/ros2_workspace.conf)" >&2
fi

# Shortcut for the RUR project.
function rur_workspace()
{
  export ROS_WORKSPACE=$HOME/rur_ros2_ws && ros2_activate && roscd && source setup.sh
}

# Activate timestamping before running a command.
show_timestamp()
{
  echo "  timestamp $(now)"
}

activate_timestamp()
{
  # Cf. http://zsh.sourceforge.net/Doc/Release/Functions.html#Functions, 9.3.1.
  preexec_functions+=show_timestamp
}

# Aliases
if [ -f ~/.config/shell/shell_aliases ]; then
  zinit wait"1" lucid for is-snippet ~/.config/shell/shell_aliases
fi
if [ -f ~/.config/zsh/zsh_aliases ]; then
  {{/* Load after OMZP::common-aliases */}}
  zinit wait"1" lucid for is-snippet ~/.config/zsh/zsh_aliases
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup=$("$HOME/.local/share/miniconda3/bin/conda" 'shell.zsh' 'hook' 2> /dev/null)
if [ $? -eq 0 ]; then
  eval "$__conda_setup"
else
  if [ -f "$HOME/.local/share/miniconda3/etc/profile.d/conda.sh" ]; then
    . "$HOME/.local/share/miniconda3/etc/profile.d/conda.sh"
  else
    export PATH="$HOME/.local/share/miniconda3/bin:$PATH"
  fi
fi
unset __conda_setup
# <<< conda initialize <<<

# Pixi completion
# https://pixi.sh/latest/.
# Schedule pixi completion initialization with a 1-second delay
# Doesn't work (`pixi completion --shell zsh > ~/.local/share/zsh/site-functions/_pixi` was used instead).
zinit ice wait'1' lucid atinit'pixi_completion() { eval "$(pixi completion --shell zsh)"; }; pixi_completion' nocd for /dev/null
# Completion for magic (https://docs.modular.com/magic)
zinit ice wait'1' lucid atinit'magic_completion() { eval "$(magic completion --shell zsh)" }; magic_completion' nocd for /dev/null

