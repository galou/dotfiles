# This file is sourced by ~/.zshrc and ~/.bashrc.
# This file is managed by chezmoi, its source is ~/.local/share/chezmoi/private_dot_config/shell/profile.tmpl.

# Prefix PATH with the given directory if not alreay present.
add_to_path()
{
  if [ -z "${1}" ]; then
    return
  fi
  if [ -n "${PATH##*${1}}" -a -n "${PATH##*${1}:*}" ]; then
    if [ -d "${1}" ] ; then
      export PATH="${1}":$PATH
    fi
  fi
}

# NPM global packages.
export NPM_PACKAGES="$HOME/.cache/npm-global"

# Make sure `node` find the npm packages.
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"

# set PATH so it includes npm bin.
add_to_path "$NPM_PACKAGES/bin"

# https://github.com/nvm-sh/nvm/blob/master/README.md
export NVM_DIR=$HOME/.local/share/nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Prefix /usr/lib/ccache to use ccache by default
add_to_path /usr/lib/ccache

add_to_path "$HOME/snap/rustup/common/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin"
add_to_path "$HOME/go/bin"
add_to_path "$HOME/.cargo/bin"

# Mojo (modular).
export MODULAR_HOME="$HOME/.local/share/modular"
add_to_path "$MODULAR_HOME/pkg/packages.modular.com_mojo/bin"

# Drake (https://drake.mit.edu/).
add_to_path /opt/drake/bin
# export PYTHONPATH="/opt/drake/lib/python$(python3 -c 'import sys; print("{0}.{1}".format(*sys.version_info))')/site-packages${PYTHONPATH:+:${PYTHONPATH}}"
export PYTHONPATH="/opt/drake/lib/python3.10/site-packages${PYTHONPATH:+:${PYTHONPATH}}"

# Add ~/.local/bin with the highest priority.
add_to_path "$HOME/.local/bin"

# Deactive ctrl-s sending xoff
# so that it can be used for something else
stty ixany
stty ixoff
stty -ixon
# Deactive showing ^C when ctrl-c
stty -echoctl

# 256-color terminal
if [ -n "$DISPLAY" -a "$TERM" = "xterm" ]; then
  export TERM=xterm-256color
fi

# Enable Wayland for Firefox.
# Cf. https://wiki.archlinux.org/title/firefox#Wayland.
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
  export MOZ_ENABLE_WAYLAND=1
  # Use Wayland on QT applications but default to X on error.
  export QT_QPA_PLATFORM="wayland;xcb"
  # Use Wayland on SDL2 applications but default to X on error.
  export SDL_VIDEODRIVER="wayland,x11"

  # Enable sudo with xwayland.
  xhost si:localuser:root > /dev/null
fi

# Enable X11 for docker.
xhost +local:docker > /dev/null

{{- /*
function jvim
{
  file="$(AUTOJUMP_DATA_DIR=~/.autojump.vim/global autojump $@)"
    if [ -n "$file" ]; then
      vim "$file";
    fi
}
*/}}

function vimc
{
  vim --clean $@
}

export EDITOR=vim

# Eclipse home, for Eclipse to see eclipse.ini
export ECLIPSE_HOME=$HOME/.config/eclipse

# Since IPython 2.0, the config directory is ~/.ipython, override this
export IPYTHONDIR=$HOME/.config/ipython
export JUPYTER_CONFIG_DIR=$HOME/.config/jupyter

# Matplotlib configuration (instead of ~/.matploblib).
export MPLCONFIGDIR=$HOME/.config/matplotlib

# Personal cheatsheets for cheat.
# mkcd $HOME/.local/share/cheat && gcl https://github.com/cheat/cheat.git cheat-src
export CHEAT_USER_DIR=$HOME/.local/share/cheat/cheat-src/cheat/cheatsheets

# ROS configuration
export ROS_LANG_DISABLE=genlisp

export COLCON_HOME=$HOME/.config/colcon

export O3DE_HOME=/opt/O3DE/23.10.0

# $TERMINAL is used as first choice in x-terminal-emulator.
export TERMINAL=$HOME/.local/bin/kitty

# Webots configuration.
export WEBOTS_DISABLE_SAVE_SCREEN_PERSPECTIVE_ON_CLOSE=1  # If defined, Webots will not save screen specific perspective changes when closed.
{{- if 0}}
{{/* Deactivated because it has no effect. */ -}}
export WEBOTS_DISABLE_WORLD_LOADING_DIALOG=1            # If defined, the loading world progress dialog will never be displayed.
{{- end}}
{{- if 0}}
{{/* Deactivated because Qt5 would be taken from there and the version there misses xcb. */ -}}
export LD_LIBRARY_PATH=$WEBOTS_HOME/lib/webots:$LD_LIBRARY_PATH  # Add the Webots libraries to the library path (useful when launching Webots directly without using the launcher).
{{- end}}

# Some programs use LC_NUMERIC to parse numbers and may expect a comma as
# decimal separator.
# There may be some inconsistency between formats of text such as dates and
# numbers because of this setting.
export LC_NUMERIC=en_US.UTF-8

# Path to npm configuration.
export npm_config_userconfig=~/.config/npm/npmrc

# Add completion for gr, http://mixu.net/gr/.
if command -v gr >/dev/null 2>&1; then
  source <(gr completion)
fi

if [ -e "$HOME/.local/share/shell/display-utilities" ]; then
  source "$HOME/.local/share/shell/display-utilities"
fi

{{- /* eth_device and wifi_device may be defined in ~/.config/chezmoi/chezmoi.yaml. */}}

get_ip_first_available()
{
{{- if (index . "eth_device")}}
  ip=$(ip address show dev {{.eth_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
{{- end}}
{{- if (index . "wifi_device")}}
  if [ -z "$ip" ]; then
  ip=$(ip address show dev {{.wifi_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
  fi
{{- end}}
  if [ -z "$ip" ]; then
    ip='127.0.0.1'
  fi
  echo $ip
}

{{- /* eth_device and wifi_device may be defined in ~/.config/chezmoi/chezmoi.yaml. */}}
{{- if (index . "eth_device")}}

get_ip_eth()
{
  ip=$(ip address show dev {{.eth_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
  if [ -z "$ip" ]; then
    ip='xx.xx.xx.xx'
  fi
  echo $ip
}

{{- end}}

{{- if (index . "wifi_device")}}

get_ip_wifi()
{
  ip=$(ip address show dev {{.wifi_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
  if [ -z "$ip" ]; then
    ip='xx.xx.xx.xx'
  fi
  echo $ip
}
{{- end }}

ros_master_local()
{
  export ROS_MASTER_URI="http://localhost:11311"
  export ROS_IP=$(get_ip_eth)
}

ros_master_host_wifi()
{
  export ROS_MASTER_URI="http://$1:11311"
  export ROS_IP=$(get_ip_wifi)
}

# cf. http://wiki.ros.org/rosconsole
ros_rosconsole_format_default()
{
  export ROSCONSOLE_FORMAT='[${severity}] [${time}]: ${message}'
}

ros_rosconsole_format_node_message()
{
    export ROSCONSOLE_FORMAT='[${severity}] [${node}]: ${message}'
}

conda_activate()
{
  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/home/gael/.local/lib/conda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
    eval "$__conda_setup"
  else
    if [ -f "/home/gael/.local/lib/conda/etc/profile.d/conda.sh" ]; then
      . "/home/gael/.local/lib/conda/etc/profile.d/conda.sh"
    else
      export PATH="/home/gael/.local/lib/conda/bin:$PATH"
    fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<
}

# PlatformIO.
platformio_activate()
{
  add_to_path $HOME/.platformio/penv/bin
}

# openrobots (https://stack-of-tasks.github.io/pinocchio/download.html)
openrobots_activate()
{
  export PATH=/opt/openrobots/bin:$PATH
  export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
  export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
  export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH # Adapt your desired python version here
  export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH
}

# MP3 manipulation
mp3_list() {
  find -mmin -"$1" -exec file "{}" \; | grep Audio | cut -d : -f -1
}

# fcd file
# cd to the directory containing file.
fcd()
{
  cd "$(dirname "$1")"
}

# mkcd directory
# mkdir directory && cd directory
mkcd()
{
  mkdir -p "$1" && cd "$1"
}

weather()
{
  # Cf. https://github.com/chubin/wttr.in#usage.
  # ?m for metric units.
  curl -Ss 'https://wttr.in?m' || echo "No weather"
}

psaux()
{
  if [[ -z "$1" ]]; then
    ps aux
  elif [[ "$1"  = grep ]]; then
    ps aux | grep grep
  else
    ps aux | grep -v grep | grep "$1"
  fi
}

psux()
{
  if [[ -z "$1" ]]; then
    ps ux
  elif [[ "$1" = grep ]]; then
    ps ux | grep grep
  else
    ps ux | grep -v grep | grep "$1"
  fi
}

extract-images()
{
  ffmpeg -i $1 $1-%05d.jpg -hide_banner
}

now()
{
  date '+%Y-%m-%d--%H-%M-%S'
}

today()
{
  date '+%Y-%m-%d'
}

# Cf. https://superuser.com/a/611582/281191.
function stopwatch()
{
  date1=`date +%s`
  while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"
    sleep 0.1
  done
}

# countdown time_in_seconds.
# Inspired by https://www.unix.com/302302337-post6.html but the original, called with
# "countdown 00:01:00" e.g. didn't work with zsh.
countdown()
{
  setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
  secs=${1}
  while [ $secs -gt 0 ]
  do
    sleep 1 &
    printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))
    secs=$(($secs - 1))
    wait
  done
  beep
  echo
}

colcon()
{
  # Credit goes to https://github.com/ctu-mrs/uav_core/blob/281f16730f587200c29a1763379a08cd53d075d1/miscellaneous/shell_additions/shell_additions.sh#L475.

  CURRENT_PATH=`pwd`

  case $* in

    init*)

      if [ ! -e "build/COLCON_IGNORE" ]; then # we are NOT at the workspace root
        {{/* `nice command colcon build` doesn't work. */}}
        command colcon build # this creates a new workspace
      fi

      ;;

    build*|b*)

      if [ -e "build/COLCON_IGNORE" ]; then # we are at the workspace root
        {{/* `nice command colcon "$@"` doesn't work. */}}
        nice colcon "$@" # this creates a new workspace
      else
        while [ ! -e "build/COLCON_IGNORE" ]; do
          cd ..

          if [[ `pwd` == "/" ]]; then
            echo "Cannot build, not in a workspace!"
            break
          elif [ -e "build/COLCON_IGNORE" ]; then
            {{/* `nice command colcon "$@"` doesn't work. */}}
            nice colcon "$@"
            break
          fi
        done

        cd "$CURRENT_PATH"
      fi

      ;;

    clean*)

      if [ -e "build/COLCON_IGNORE" ]; then # we are at the workspace root
        rm -rf build install log
        mkdir build
        cd build
        touch COLCON_IGNORE
        cd ..
      else
        while [ ! -e "build/COLCON_IGNORE" ]; do
          cd ..

          if [[ `pwd` == "/" ]]; then
            echo "Cannot clean, not in a workspace!"
            break
          elif [ -e "build/COLCON_IGNORE" ]; then
            rm -rf build install log
            mkdir build
            cd build
            touch COLCON_IGNORE
            break
          fi
        done

        cd "$CURRENT_PATH"
      fi

      ;;

    *)
      {{/* `nice command colcon $@` doesn't work. */}}
      nice colcon $@
      ;;

  esac
}

function grcat_rc() {
  grcat $DIR/src/robocon_ros2_pkgs/jakub_tests/grc/grc-ros2.conf
}

function treat_debug_log() {
  # handy filter and colorizer (!) for noisy ROS2 debug logs:
  #
  # - rcl
  # - weird action related messages
  # - tf2 message filter
  # - rviz bugs
  #
  # needs grc (apt install grc)
  #grc -c $DIR/src/robocon_ros2_pkgs/jakub_tests/grc/grc-ros2.conf -es --colour=on $@
  $@ 2>&1 | grcat_rc
}

# Echo the latest log with optional filter (node name).
function roslog() {
  filter=${1:-.} # $1 or '.' to feed grep with something
  echo $HOME/.ros/log/$(ls -1 -c $HOME/.ros/log/ | grep $filter | head -n 1)
}

# Echo the latest log with optional filter (for example node name), working also for Python nodes
#  that has logs named python3_XXXXX_XXXXX.log => it has to search inside for `[something node name`
function roslogex() {
  filter=${1:-.} # $1 or '.' to feed grep with something
  ls -1 -c $HOME/.ros/log/ | head -n 100 | xargs -I {} grep -m 1 -l -E "\[[^]]*?$filter" $HOME/.ros/log/{} 2>/dev/null | head -n 1
}

# returns all logs (!!!) for specified node; can be time consuming if you have a lot of ROS logs!
# log names are returned from the oldest to the newest
# use like this `roslogex_all robocon_app | xargs -I {} grep -E 'Time taken' {} | grcat_rc`
# or `roslogex_all robocon_app | xargs -I {} cat {} | grcat_rc`
function roslogex_all() {
  filter=${1:-.} # $1 or '.' to feed grep with something
  ls -1 -r -c $HOME/.ros/log/ | xargs -I {} grep -m 1 -l -E "\[[^]]*?$filter" $HOME/.ros/log/{} 2>/dev/null
}

# Open the latest log with optional filter (node name).
function editor_roslog() {
  editor=${EDITOR:-less} # $EDITOR or less
  $editor $(roslog $1)
}

function roslogex_grc() {
  cat $(roslogex $1) | grcat_rc
}

function showtermcolors() {
  msgcat --color=test

  for x in {0..9}; do
      for i in {30..37}; do
          for a in {40..47}; do
              echo -ne "\e[$x;$i;$a""m$x;$i;$a""\e[0;37;40m "
          done
          echo
      done
  done
  echo ""
  echo '\\e[{style};{fg};{bg}m For example \\e[8;37;47m'
  echo '\\033[{style};{fg};{bg}m For example \\033[8;37;47m'
}

export HOST

if [ "$0" = "/usr/sbin/lightdm-session" -a "$DESKTOP_SESSION" = "i3" ]; then
    export $(gnome-keyring-daemon -s)
fi

{{- if (index . "github.pat")}}
# Personnal Access Token for Github.
export PAT={{.github.pat}}
{{- end}}

# Launch byobu for text logins.
# _byobu_sourced=1 . /usr/bin/byobu-launch 2>/dev/null || true

# NNN configuration
export NNN_FIFO=/tmp/nnn.fifo
# Plugins. Activate with `;` followed by the key or <Alt>+key.
export NNN_PLUG='p:preview-tui'

#export WINEARCH=win32

# Workaround the white-screen syndrome (https://wiki.archlinux.org/title/java#Gray_window,_applications_not_resizing_with_WM,_menus_immediately_closing).
# # Jabref has this syndrome on Sway with Nvidia.
export _JAVA_AWT_WM_NONREPARENTING=1

{{- if (and (index . "openai") (index .openai "api_key"))}}
export OPENAI_API_KEY={{.openai.api_key}}
{{- end}}

{{- if (index . "onshape")}}
# Obtained at https://dev-portal.onshape.com/keys
export ONSHAPE_API=https://cad.onshape.com
{{- if (index .onshape "api_key")}}
export ONSHAPE_ACCESS_KEY={{.onshape.api_key}}
{{- end}}
{{- if (index .onshape "secret_key")}}
export ONSHAPE_SECRET_KEY={{.onshape.secret_key}}
{{- end}}
{{- end}}

{{- if (and (index . "roboflow") (index .roboflow "api_key"))}}
export ROBOFLOW_API_KEY={{.roboflow.api_key}}
{{- end}}

{{- if (and (index . "kmr") (index .kmr "robocon_remote_user"))}}
export ROBOCON_REMOTE_USER={{.kmr.robocon_remote_user}}
{{- end}}

# Session management with oatmeal (https://github.com/dustinblackman/oatmeal).
function oatmeal-sessions() {
    (
        cd "$(oatmeal sessions dir)"
        id=$(
          ls | \
          (while read f; do echo "$(cat $f)\n---\n"; done;) | \
          yq -p=yaml -o=json - 2> /dev/null | \
          jq -s . | \
          jq -rc '. |= sort_by(.timestamp) | .[] |  "\(.id):\(.timestamp):\(.state.backend_model):\(.state.editor_language):\(.state.messages[] | .text | tojson)"' | \
          fzf --ansi | \
          awk -F ':' '{print $1}' | \
          head -n1 | \
          awk -F '.' '{print $1}'
        )
        oatmeal sessions open --id "$id"
    )
}

# Solve an issue with TensorFlow
# Cf. https://stackoverflow.com/a/72145676.
export XLA_FLAGS=--xla_gpu_cuda_data_dir=/usr/lib/cuda

function yy() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

{{- if (index . "kdeconnect_device")}}

function send-kdeconnect() {
  kdeconnect-cli --list-available --id-only 2>/dev/null | grep -q {{.kdeconnect_device}} || (echo "Device {{.kdeconnect_device}} not found" && return 1)
  for file in "$@"; do
    kdeconnect-cli --device {{.kdeconnect_device}} --share "$file"
  done
}
{{- end}}

function nmcli-robot() {
  nmcli con down S23+
  nmcli con up Robocon_v2
  nmcli con up vlan_robocon_v2
}
