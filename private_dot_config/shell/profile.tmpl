# This file is sourced by ~/.zshrc and ~/.bashrc.
# This file is managed by chezmoi, its source is ~/.local/share/chezmoi/private_dot_config/shell/profile.tmpl.

# set PATH so it includes npm bin if it exists and is not already in $PATH.
npm_global_path=$HOME/.cache/npm-global/bin
if [ -n "${PATH##*${npm_global_path}}" -a -n "${PATH##*${npm_global_path}:*}" ]; then
    if [ -d $npm_global_path ] ; then
        export PATH=$npm_global_path:$PATH
    fi
fi

# Prefix /usr/lib/ccache to use ccache by default
ccache_path=/usr/lib/ccache
if [ -n "${PATH##*${ccache_path}}" -a -n "${PATH##*${ccache_path}:*}" ]; then
    if [ -d $ccache_path ] ; then
        export PATH=$ccache_path:$PATH
    fi
fi

# set PATH so it includes user's private bin if it exists and is not already in $PATH.
local_bin_path=$HOME/.local/bin
if [ -n "${PATH##*${local_bin_path}}" -a -n "${PATH##*${local_bin_path}:*}" ]; then
    if [ -d $local_bin_path ] ; then
        export PATH=$local_bin_path:$PATH
    fi
fi

# Deactive ctrl-s sending xoff
# so that it can be used for something else
stty ixany
stty ixoff
stty -ixon
# Deactive showing ^C when ctrl-c
stty -echoctl

# 256-color terminal
if [ -n "$DISPLAY" -a "$TERM" = "xterm" ]; then
	export TERM=xterm-256color
fi

#function jvim
#{
#       	file="$(AUTOJUMP_DATA_DIR=~/.autojump.vim/global autojump $@)"
#	if [ -n "$file" ]; then 
#		vim "$file";
#       	fi
#}

export EDITOR=vim

# Eclipse home, for Eclipse to see eclipse.ini
export ECLIPSE_HOME=$HOME/.config/eclipse

# Since IPython 2.0, the config directory is ~/.ipython, override this
export IPYTHONDIR=$HOME/.config/ipython
export JUPYTER_CONFIG_DIR=$HOME/.config/jupyter

# Matplotlib configuration (instead of ~/.matploblib).
export MPLCONFIGDIR=$HOME/.config/matplotlib

# Personal cheatsheets for cheat.
# mkcd $HOME/.local/share/cheat && gcl https://github.com/cheat/cheat.git cheat-src
export CHEAT_USER_DIR=$HOME/.local/share/cheat/cheat-src/cheat/cheatsheets

# ROS configuration
export ROS_LANG_DISABLE=genlisp

export LC_ALL=C.UTF-8

export COLCON_HOME=$HOME/.config/colcon

# Add completion for gr, http://mixu.net/gr/.
if command -v gr >/dev/null 2>&1; then
    source <(gr completion)
fi

{{- /* eth_device and wifi_device may be defined in ~/.config/chezmoi/chezmoi.yaml. */}}

get_ip_first_available()
{
	{{- if (index . "eth_device")}}
	ip=$(ip address show dev {{.eth_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	{{- end}}
	{{- if (index . "wifi_device")}}
	if [ -z "$ip" ]; then
		ip=$(ip address show dev {{.wifi_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	fi
	{{- end}}
	if [ -z "$ip" ]; then
		ip='127.0.0.1'
	fi
	echo $ip
}

{{- /* eth_device and wifi_device may be defined in ~/.config/chezmoi/chezmoi.yaml. */}}
{{- if (index . "eth_device")}}

get_ip_eth()
{
	ip=$(ip address show dev {{.eth_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
	if [ -z "$ip" ]; then
		ip='xx.xx.xx.xx'
	fi
	echo $ip
}

{{- end}}

{{- if (index . "wifi_device")}}

get_ip_wifi()
{
    ip=$(ip address show dev {{.wifi_device}} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1')
    if [ -z "$ip" ]; then
	ip='xx.xx.xx.xx'
    fi
    echo $ip
}
{{- end }}

ros_master_local()
{
    export ROS_MASTER_URI="http://localhost:11311"
    export ROS_IP=$(get_ip_eth)
}

ros_master_host_wifi()
{
    export ROS_MASTER_URI="http://$1:11311"
    export ROS_IP=$(get_ip_wifi)
}

# cf. http://wiki.ros.org/rosconsole
ros_rosconsole_format_default()
{
    export ROSCONSOLE_FORMAT='[${severity}] [${time}]: ${message}'
}

ros_rosconsole_format_node_message()
{
    export ROSCONSOLE_FORMAT='[${severity}] [${node}]: ${message}'
}

conda_activate()
{
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('/home/gael/.local/lib/conda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
	eval "$__conda_setup"
    else
	if [ -f "/home/gael/.local/lib/conda/etc/profile.d/conda.sh" ]; then
	    . "/home/gael/.local/lib/conda/etc/profile.d/conda.sh"
	else
	    export PATH="/home/gael/.local/lib/conda/bin:$PATH"
	fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
}

# MP3 manipulation
mp3_list() {
    find -mmin -"$1" -exec file "{}" \; | grep Audio | cut -d : -f -1
}

# fcd file
# cd to the directory containing file.
fcd()
{
    cd "$(dirname "$1")"
}

# mkcd directory
# mkdir directory && cd directory
mkcd()
{
    mkdir -p "$1" && cd "$1"
}

weather()
{
    curl -Ss 'https://wttr.in?0'
}

psaux()
{
    if [[ -z "$1" ]]; then
        ps aux
    elif [[ "$1"  = grep ]]; then
        ps aux | grep grep
    else
        ps aux | grep -v grep | grep "$1"
    fi
}

psux()
{
    if [[ -z "$1" ]]; then
        ps ux
    elif [[ "$1" = grep ]]; then
        ps ux | grep grep
    else
        ps ux | grep -v grep | grep "$1"
    fi
}

extract-images()
{
    ffmpeg -i $1 $1-%05d.jpg -hide_banner
}

# connected_displays
# Return a space separated list of connected displays
connected_displays()
{
    xrandr | grep -v disconnected | grep connected | cut --delimiter=' ' --field=1
}

now()
{
    date '+%Y-%m-%d--%H-%M-%S'
}

# countdown time_in_seconds.
# Inspired by https://www.unix.com/302302337-post6.html but the original, called with
# "countdown 00:01:00" e.g. didn't work with zsh.
countdown()
{
  setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
  secs=${1}
  while [ $secs -gt 0 ]
  do
    sleep 1 &
    printf "\r%02d:%02d:%02d" $((secs/3600)) $(( (secs/60)%60)) $((secs%60))
    secs=$(($secs - 1))
    wait
  done
  beep
  echo
}

export HOST
